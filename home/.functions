#!/usr/bin/env sh

# Heroku
#

# Postgres equivalent to heroku db:pull.
# Pulls latest heroku pgbackups dump into local database
#
# Usage:
#
# $ heroku_pg_pull [appname] [local database name]
#
function heroku_pg_pull(){
  echo "!   WARNING: Data in the local database '$2' will be destroyed."
  echo "    Type '$2' to overwrite data in local database '$2'"
  read local_database_name\?"> "
  echo
  if [ "$local_database_name" "==" "$2" ]; then
    curl -o heroku_pg_pull_latest_backup.dump `heroku pgbackups:url -a $1`;
    pg_restore --verbose --clean --no-acl --no-owner -h localhost -U `whoami` -d $2 heroku_pg_pull_latest_backup.dump;
    rm heroku_pg_pull_latest_backup.dump;
  else
    echo "Aborted"
  fi
}


# Postgres equivalent to heroku db:push.
# Pushes local database up to heroku application database.
#
# Usage:
#
# $ heroku_pg_push [appname] [local database name]
#
function heroku_pg_push(){
  echo "!   WARNING: Data in the Heroku app '$1' will be destroyed."
  echo "    Type '$1' to overwrite data in Heroku app '$1'"
  read heroku_app_name\?"> "
  echo
  if [ "$heroku_app_name" "==" "$1" ]; then
    heroku pg:reset DATABASE_URL -a $1
    pg_dump -xO $2 | psql `heroku config:get DATABASE_URL -a $1`
  else
    echo "Aborted"
  fi
}




function ssh_key_tools(){

  ACTION=$1

	case "$1" in

	list_keys) ls -al ~/.ssh
	    ;;
	show_keys) ls -al ~/.ssh | cat
	    ;;
	show_key)  ls -al ~/.ssh
	    ;;
	*) ls -al ~/.ssh
	   ;;
	esac

}





# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}